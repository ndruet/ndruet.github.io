<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bloc notes sur Java/JEE]]></title>
  <link href="http://ndruet.github.io/atom.xml" rel="self"/>
  <link href="http://ndruet.github.io/"/>
  <updated>2013-08-05T16:30:32+02:00</updated>
  <id>http://ndruet.github.io/</id>
  <author>
    <name><![CDATA[Nicolas Druet]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pr&#233;sentation de Lombok]]></title>
    <link href="http://ndruet.github.io/blog/2013/06/20/presentation-de-lombok/"/>
    <updated>2013-06-20T09:29:00+02:00</updated>
    <id>http://ndruet.github.io/blog/2013/06/20/presentation-de-lombok</id>
    <content type="html"><![CDATA[<p><img style="float : left;" src="http://ndruet.github.io/images/posts/lombok-logo.png" title="logo" />
<a href="http://projectlombok.org">Lombok</a> est une API dont le but est de générer à la compilation, du code Java(<em>getters()/setters(), toString()&hellip;</em>), à notre place .
Tout se fait à l&#8217;aide de simples annotations à poser dans nos classes. Actuellement en version <a href="http://projectlombok.org/download.html">0.12 &ndash; Angry Butterfly</a>, le projet est de plus en plus populaire.</p>

<!--more-->


<p><div style="clear:both;"/>
<br/></p>

<h1>L&#8217;API</h1>

<p>Il existe de nombreuses annotations, dont certaines sont directement inspirées de Groovy. En voici une sélection&hellip;</p>

<h3>> @Getter et @Setter</h3>

<p>Génère les getters/setters d&#8217;un attribut d&#8217;une classe :</p>

<p><figure class='code'><figcaption><span>@Getter et @Setter </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GetterSetterExample</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Getter</span>
</span><span class='line'>   <span class="nd">@Setter</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;toto&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Il est également possible de gérer un cache sur les getters avec <a href="http://projectlombok.org/features/GetterLazy.html">@Getter(lazy=true)</a>.</p>

<h3>> @ToString et @EqualsAndHashCode</h3>

<p>Implémente respectivement les méthodes <em>toString(), equals()</em> et <em>hashCode()</em></p>

<p><figure class='code'><figcaption><span>@ToString et @EqualsAndHashCode </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@EqualsAndHashCode</span>
</span><span class='line'><span class="nd">@ToString</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ToStringEqualsAndHashCodeExample</span> <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Getter</span>
</span><span class='line'>   <span class="nd">@Setter</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;toto&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Les deux annotations permettent également d&#8217;exclure certains attributs.</p>

<h3>> @Data</h3>

<p>Combinaison de <em>@Getter,@Setter,@EqualsAndHashCode</em> et <em>@ToString</em>.
Les accesseurs et les méthodes <em>toString(), equals()</em> et <em>hashCode()</em> sont générées et disponibles à la complétion.</p>

<h3>> @Cleanup</h3>

<p>Permet de fermer proprement une ressource ouverte sans avoir à écrire les blocs try{}/finally{}</p>

<p><figure class='code'><figcaption><span>@Cleanup </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Cleanup</span> <span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>> @Delegate</h3>

<p>Directement inspirée de <a href="http://groovy.codehaus.org/Delegate+transformation">Groovy</a>, génère dans un objet A contenant B toutes les méthodes de B afin d&#8217;éviter de faire <em>A.getB().XXX</em></p>

<p><figure class='code'><figcaption><span>@Delegate </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Data</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">A</span>  <span class="o">{</span>
</span><span class='line'>   <span class="nd">@Delegate</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="n">B</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Data</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">B</span>  <span class="o">{</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">new</span> <span class="nf">A</span><span class="o">().</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>> @Builder</h3>

<p>Génère comme son nom l&#8217;indique un builder.</p>

<p><figure class='code'><figcaption><span>@Builder </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Builder</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BuilderExample</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">BuilderExample</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;toto&quot;</span><span class="o">).</span><span class="na">age</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>> @NonNull</h3>

<p>Si <em>javax.validation.constraints.NotNull</em> existe déjà dans Java 6, elle ne fait qu&#8217;indiquer que le paramêtre ou la valeur retournée d&#8217;une méthode ne doivent pas être null.
Lombok propose une annotation similaire <a href="https://github.com/rzwitserloot/lombok/blob/master/src/core/lombok/NonNull.java">lombok.NonNull</a> et <strong>renvoie</strong> une NullPointerException si besoin.</p>

<p><figure class='code'><figcaption><span>@NonNull </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">NonNullExample</span><span class="o">(</span><span class="nd">@NonNull</span> <span class="n">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">&hellip;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Cela évite d&#8217;utiliser les <a href="http://code.google.com/p/guava-libraries/wiki/PreconditionsExplained">Preconditions de Guava</a>.</p>

<h3>> Experimentals</h3>

<p>Quelques annotions sont dites &ldquo;experimental&rdquo; avant de rejoindre les &ldquo;main&rdquo; ou bien de disparaitre.
Elles sont référencées <a href="http://projectlombok.org/features/experimental/index.html">ici</a>.
On y retrouve <em>@Builder</em> par exemple.</p>

<h1>Architecture</h1>

<p>Le principe de Lombok est simple : juste avant la compilation , les fichiers sources sont parcourus afin remplacer les annotations par du code.
Si les annotions sont apparues avec Java 5, leur gestion à la compilation (<strong>RetentionPolicy.SOURCE</strong>) nécessitait l&#8217;appel à <a href="http://docs.oracle.com/javase/1.5.0/docs/guide/apt/GettingStarted.html">Apt</a> avant l&#8217;appel à Javac.
Avec l&#8217;arrivée de Java 6, le parcours des sources (Abstract Syntax Tree ou AST) est directement intégré au compilateur. De là est né ce projet.
Lombok s&#8217;appuie sur la <a href="http://www.jcp.org/en/jsr/detail?id=269">JSR 269 Pluggable Annotation Processing API</a> et nécessite obligatoirement le JDK 6 pour la compilation.</p>

<p>Le parcours de l&#8217;Abstract Syntax Tree est expliqué en détails sur <a href="https://www.java.net//pub/a/today/2008/04/10/source-code-analysis-using-java-6-compiler-apis.html#accessing-the-abstract-syntax-tree-the-compiler-tree-api">Java.net</a>.</p>

<h1>L&#8217;installation</h1>

<h3>> Projet Maven</h3>

<p><figure class='code'><figcaption><span>pom.xml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>&hellip;
</span><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>&hellip;
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>0.11.8<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>&hellip;
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>&hellip;
</span></code></pre></td></tr></table></div></figure></p>

<p>Ne pas oublier que Lombok requiert Java 6 au minimum dans la configuration du plugin de compilation :</p>

<p><figure class='code'><figcaption><span>pom.xml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>&hellip;
</span><span class='line'><span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>&hellip;
</span><span class='line'>  <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>${maven-compiler-plugin.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>          <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>          <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>&hellip;
</span><span class='line'><span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>&hellip;
</span></code></pre></td></tr></table></div></figure></p>

<h3>> IDE</h3>

<p>Pour que les méthodes générées automatiquement à la compilation soient disponibles à la complétion dans notre IDE, il est nécessaire d&#8217;installer un plugin.
Loombock est compatible avec NetBeans, Eclipse (et ses variantes) et IntelliJ.</p>

<h4>Eclipse</h4>

<p>Le support d&#8217;Eclipse est assuré par l&#8217;équipe même du projet.
Une fois lombock dans les dépendances de l&#8217;application, il suffit de faire <em>Run as Application</em> et choisir la classe <em>lombok.core.Main.class</em>
<img src="http://ndruet.github.io/images/posts/lombok-setup-eclipse.png" /></p>

<p>En cliquand sur <em>install/update</em>, Lombok met à jour le fichier <em>eclipse.ini</em></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-javaagent:lombok.jar
</span><span class='line'>-Xbootclasspath/a:lombok.jar</span></code></pre></td></tr></table></div></figure></p>

<h4>> IDEA IntelliJ</h4>

<p>Le plugin est hébergé sur <a href="https://code.google.com/p/lombok-intellij-plugin/">Google Code</a>.
Son installation se limité au dézippage de l&#8217;<a href="https://code.google.com/p/lombok-intellij-plugin/downloads/list">archive</a> dans le répertoire <code>/plugins</code>.
La version du plugin dépend de la version d&#8217;IntelliJ installée.</p>

<h4>> Netbeans</h4>

<p>Il suffit de cocher <em>Enable Annotation Processing in Editor</em> dans les propriétés du projet (<a href="http://projectlombok.org/setup/netbeans.html">http://projectlombok.org/setup/netbeans.html</a>)</p>

<h1>Delombok</h1>

<p>Il est important de garder à l&#8217;esprit que la génération de code se fait à la compilation.
Tous les outils qui se basent sur le code source de nos projets ne verront que les annotations Lombok.
C&#8217;est pourquoi la JavaDoc générée est imcomplète car Lombok n&#8217;a pas encore mis à jour les sources.</p>

<p>L&#8217;équipe du projet a inclu dans <em>lombok.jar</em>, l&#8217;outil <em>delombok</em> qui copie les sources modifiées dans le répertoire de son choix.
L&#8217;interêt est double : il permet d&#8217;apercevoir le code généré mais également d&#8217;indiquer ce répertoire à la génération de la JavaDoc afin que toutes les méthodes y soient référencées.</p>

<p>Delombok est à la fois compatible avec Ant (<a href="http://projectlombok.org/features/delombok.html">http://projectlombok.org/features/delombok.html</a>) et Maven (<a href="http://awhitford.github.com/lombok.maven/">http://awhitford.github.com/lombok.maven/</a>).</p>

<h1>GWT</h1>

<p>Lombok semble compatible avec GWT.
Malheureusement je reste sur un échec.
<a href="https://groups.google.com/forum/#!topic/project-lombok/WwiymShYBsg">https://groups.google.com/forum/#!topic/project-lombok/WwiymShYBsg</a></p>

<h1>Conclusion</h1>

<p>A consommer sans modération !</p>

<h1>Les ressources</h1>

<ul>
<li>Projet Lombok &ndash; <a href="http://projectlombok.org">http://projectlombok.org</a></li>
<li>Documentation &ndash; <a href="http://projectlombok.org/api/index.html">http://projectlombok.org/api/index.html</a></li>
<li>Projet GitHub &ndash; <a href="https://github.com/rzwitserloot/lombok">https://github.com/rzwitserloot/lombok</a></li>
</ul>


<p><a href="http://notatube.blogspot.fr/2010/12/project-lombok-creating-custom.html">http://notatube.blogspot.fr/2010/12/project-lombok-creating-custom.html</a>
<a href="http://jnb.ociweb.com/jnb/jnbJan2010.html">http://jnb.ociweb.com/jnb/jnbJan2010.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrer d'&#201;clipse &#224; Intellij]]></title>
    <link href="http://ndruet.github.io/blog/2013/06/12/migrer-declipse-a-intellij/"/>
    <updated>2013-06-12T11:11:00+02:00</updated>
    <id>http://ndruet.github.io/blog/2013/06/12/migrer-declipse-a-intellij</id>
    <content type="html"><![CDATA[<p>Intellij est un IDE Java développé par JetBrains, disponible en deux versions; une version open source <strong>Community Edition</strong> limitée; une version complète <strong>Ultimate</strong> nécessitant l&#8217;achat d&#8217;une license (<a href="http://www.jetbrains.com/idea/features/editions_comparison_matrix.html">matrice de comparaison</a>).</p>

<p>Après 8 ans sous d&#8217;Eclipse, j&#8217;ai décidé de migrer mes projets dessus pour voir si sa réputation était justifiée.</p>

<p><img class="middle" src="http://ndruet.github.io/images/posts/intellij-logo.png" title="logo" ></p>

<!--more-->


<h1>Les points +</h1>

<p>Le développement sous Intellij m&#8217;a paru bien plus agréable qu&#8217;avec Eclipse pour les raisons suivantes :</p>

<ul>
<li>Complétion immédiate (il n&#8217;est plus nécessaire de faire CTRL+SPACE) et plus intelligente (complétion SQL active même dans un fichier .java)</li>
<li>Prise en charge native de MAVEN, SVN et GIT (aucun plugin à télécharger)</li>
<li>Support de nombreux frameworks Play, Grails, Scala&hellip; (sous Eclipse 4.2 le plugin scala est en béta et Spring Tool Suite est basé sur Eclipse 3.8)</li>
<li>Outil de test de services REST inclu (j&#8217;en ai profité pour désinstaller HttpRequester sous Firefox)</li>
<li>Sauvegarde automatique des fichiers (l&#8217;historique local du fichier ne dépend pas d&#8217;un CTRL+S)</li>
<li>Partage simple de la configuration de l&#8217;IDE, soit par un serveur dédié <a href="http://www.jetbrains.com/idea/features/settings_sync.html">JetBrain</a>, soit avec son <a href="http://devnet.jetbrains.com/docs/DOC-1186">gestionnaire de source</a></li>
<li>Editeur SQL avec complétion et export des resultats (Eclipse le propose également)</li>
<li>IHM moderne et qui ne gèle pas (le thème Darcula est magnifique)</li>
<li>Couverture de code intégrée (mais je garde une préférence pour EclEmma dans Eclipse)</li>
<li>Presse papier avec historique (CTRL+SHIFT+V)</li>
<li>Zoom+/&ndash; avec la molette de la souris (à activer)</li>
<li>Refactoring plus intelligent (ex : Quand on renomme une classe, les requêtes JPA sont mises à jour)</li>
</ul>


<h1>Les points &ndash;</h1>

<p>Si Intellij m&#8217;a fait bonne impression, certains fonctionnements par défaut m&#8217;ont pertubé dès l&#8217;ouverture du premier projet.</p>

<h3>> Le prix</h3>

<p>Commençons par le point qui fâche.
L&#8217;acquisition IntelliJ coûtera, la premère fois, 179 € HT pour une licence personnelle (89 € HT pour les étudiants) .
Les mises à jours sont ensuite 40% moins chères en moyenne.
A noter également que <a href="http://blog.jetbrains.com/blog/2013/04/15/50-off-jetbrains-tools-and-help-to-plant-a-billion-trees/">des offres</a> ont existé dans le passé allant jusqu&#8217;à 50% de réduction sur le prix des licences.
Pour clore le sujet, la version <strong>Ultimate</strong> est disponible gratuitement 30 jours.</p>

<h3>> Le position du curseur dans l&#8217;éditeur</h3>

<p>Le curseur dans l&#8217;éditeur se positionne là où le pointeur de la souris se trouve, qu&#8217;il y ait un retour à ligne ou non dans le fichier source.
Pour retrouver un comportement habituel : <em>File > Settings > Editor ></em> et décocher <strong>Allow placement of caret after end of line</strong>.</p>

<h3>> Les raccourcis clavier</h3>

<p>La principale difficulté que j&#8217;ai rencontrée concerne les raccourcis clavier.
D&#8217;une manière générale, je ne les trouve pas très bien pensés.
Les combinaisons de touches avec F1&hellip;12 ne sont pas pratiques et trop souvent les deux mains sont sollicités.</p>

<p>Mais il est possible de les remplacer par ceux d&#8217;Eclipse ou NetBeans.
Pour cela : <em>File > Settings > Keymap</em></p>

<p><img class="middle" src="http://ndruet.github.io/images/posts/intellij_shortcut.png" title="curseur" /></p>

<p class="warning"> CTRL+Y (redo) n&#8217;est pas l&#8217;inverse de CTRL+Z (undo) mais supprime la ligne sur laquelle est positionné votre curseur. </p>


<h3>> Debug : Popup au survole des variables</h3>

<p>Le delai d&#8217;affichage de la popup sur les variables en mode Debug est par défaut de 700ms. Pour le changer : <em>File > Settings > Debugger > Data Views</em>
et modifier la valeur de <strong>Value tooltips delay(ms)</strong>. En mettant 100ms, la popup s&#8217;affiche immédiatement.</p>

<h1>Ressources</h1>

<p>JetBrains met à disposition une <a href="http://www.jetbrains.com/idea/documentation/migration_faq.html">FAQ</a> pour aider la migration d&#8217;Eclipse vers Intellij.
On trouve également sur leur site <a href="http://www.jetbrains.com/resharper/webhelp/Reference__Keyboard_Shortcuts.html">une liste de raccourcis</a> ordonnées par catégorie (Navigation and search, Refactorings&hellip;) qui peut être utile d&#8217;avoir sous la main.
Enfin, lors du Devoxx 2013, un talk a été consacré aux astuces pour gagner en productivité sur Netbeans, Eclipse et Intellij.
Je vous invite à suivre la présentation disponible sur <a href="http://www.devoxx.com/display/FR13/IDE+Java+++astuces+de+productivite+pour+le+quotidien">Parleys.com</a>.</p>

<h1>Conclusion</h1>

<p>Cette expèrience m&#8217;a fait prendre conscience de toutes les lacunes d&#8217;Eclipse.
En effet, il n&#8217;est pas normal d&#8217;avoir une option pour redémarrer l&#8217;IDE, de faire <em>F5</em> et <em>clean</em> sur un projet pour qu&#8217;il s&#8217;importe correctement, ou encore de forcer la mise à jour des dépendances Maven après avoir modifié le <code>pom.xml</code>.
Les developpeurs ont besoin d&#8217;un outil fiable qui prend en charge les dernières technologies.
C&#8217;est ce que Intellij propose. Malheureusement, cela a un prix.
Une chose est sûre, les équipes d&#8217;Eclipse doivent se ressaisir.
Le désamour est croissant depuis la branche 4.x. <a href="http://www.springsource.org/downloads/sts-ggts">Spring Tool Suite</a> reste basé sur la version 3.8 réputée plus fiable et l&#8217;annonce d&#8217;<a href="http://developer.android.com/sdk/installing/studio.html">AndroidStudio</a> basé sur Intellij au dernier Google I/O sont autant de signes qui vont dans ce sens.
C&#8217;est finalement Netbeans qui risque de gagner le plus en popularité : à la fois gratuit, plus réactif qu&#8217;Eclipse dans les mises à jours et plus stable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cr&#233;er un blog avec Octopress sous Windows]]></title>
    <link href="http://ndruet.github.io/blog/2013/05/27/creer-un-blog-avec-octopress-sous-windows/"/>
    <updated>2013-05-27T16:47:00+02:00</updated>
    <id>http://ndruet.github.io/blog/2013/05/27/creer-un-blog-avec-octopress-sous-windows</id>
    <content type="html"><![CDATA[<p>L&#8217;ouverture de ce blog aura été l&#8217;occasion de découvrir <a href="http://octopress.org">Octopress</a>, un générateur de blog statique écrit en Ruby basé sur <a href="http://jekyllrb.com">JeKyll</a>.</p>

<p><img class="middle" src="http://ndruet.github.io/images/posts/octopress-logo.png" title="logo" ></p>

<!--more-->


<h1>Simple<a name="Simple"></a></h1>

<p>L’avantage principal d’un générateur de blog statique, en comparaison avec Wordpress ou Blogger, est sa simplicité de fonctionnement.
Aucune base de données n&#8217;est nécessaire, ni de serveur d’application.
Le blog tient la charge même avec une forte audience, répond rapidement, et surtout se teste facilement en local.</p>

<p>Les principales commandes d&#8217;Octopress sont :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate          # Genère entièrement le site à partir du fichier _config.xml et les répertoires /sources et /saas
</span><span class='line'>rake preview           # Monte un serveur http://localhost:4000 et prend à chaud les modifications des posts (/sources)
</span><span class='line'>rake new_post["title"] # Création d'un nouveau post
</span><span class='line'>rake deploy            # Déploiement sur GitHub</span></code></pre></td></tr></table></div></figure>


<p>Par défaut les articles suivent la synthaxe <a href="http://daringfireball.net/projects/markdown/">Markdown</a> et s&#8217;éditent avec un simple éditeur de texte (Notepad++ en l&#8217;occurence).</p>

<h1>Thèmes<a name="Thèmes"></a></h1>

<p>Les thèmes sont disponibles sur GitHub, et apportent en général une présentation claire, et sont +/&ndash; <em>responsive design</em>.</p>

<p>L&#8217;installation se résume à ces quelques commandes :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress                         # Se placer à la racine d'Octopress
</span><span class='line'>git clone GIT_URL .themes/THEME_NAME # Clone le repo du thème et lui affecte un nom
</span><span class='line'>rake install['THEME_NAME']           # Installe le thème
</span><span class='line'>rake generate                        # Regénère le blog</span></code></pre></td></tr></table></div></figure>


<p>La commande <code>rake install</code> permet de switcher d&#8217;un thème à l&#8217;autre.</p>

<p>Vous en trouverez sur <a href="http://octopressthemes.com/">http://octopressthemes.com</a> et sur <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">le wiki</a>.
Si le thème par défaut suffit amplement et ne nécessite pas de modification, l&#8217;idée d&#8217;avoir la main sur le CSS et les templates est plutôt agréable.
Personnellement, j&#8217;ai opté pour <a href="https://github.com/sevenadrian/foxslide">Foxslide</a>.</p>

<h1>Plugins<a name="Plugins"></a></h1>

<p>Octopress inclut quelques plugins prêts à l&#8217;emploi.
Ainsi l&#8217;interfaçage avec les comptes twitter, google+, google analytics… s&#8217;effectue en renseignement ses identifiants dans le fichier <code>_config.xml</code>.
On peut également inclure des Gists, des videos HTML5, bénéficier de la coloration syntaxique et ajouter DISQUS pour les commentaires.</p>

<p>D&#8217;autres existent et sont listés sur le <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">wiki</a>.</p>

<h1>Problèmes rencontrés<a name="Problèmes rencontrés"></a></h1>

<p>Mais voila, du téléchargement d’Octopress à la publication sur Github, tout n’a pas été si simple.
Heureusement, <a href="http://derantell.github.io/blog/2012/12/02/getting-started-with-octopress-on-windows/">le blog de David Tellander</a> a répondu à la plupart de mes problèmes cités ci-dessous.</p>

<h3>> UTF-8 &ndash; Les accents</h3>

<p>La gestion des accents n&#8217;a pas été évidente :</p>

<ul>
<li>La commande <code>rake generate</code> échoue systématiquement si un accent est présent dans la partie descriptive du post <a href="http://fr.wikipedia.org/wiki/YAML">YAML</a>.
Il faut donc remplacer les caractères accentués par leur <a href="http://www.commentcamarche.net/contents/489-caracteres-speciaux-html">codes ISO</a>.</li>
<li>Pour l&#8217;affichage des accents dans le corps du post, il est nécessaire d&#8217;encoder les posts en UTF-8 (sans <a href="http://en.wikipedia.org/wiki/Byte_order_mark#UTF-8">Byte Order Mark</a> comme précisé dans <a href="http://jekyllrb.com/docs/frontmatter/">la documentation Jekyll</a>).
</br></br></li>
</ul>


<h3>> Windows &ndash; Commande inéxistante</h3>

<p>Au moment de déployer sur GitHub, le message suivant s&#8217;est affiché :</p>

<blockquote><p><em>‘hellip’ is not recognized as an internal or external command, operable program or batch file.</em></p></blockquote>

<p>La correction consiste à remplacer <code>&amp;hellip;</code> par <code>...</code> dans le fichier <code>RakeFile</code> à la ligne suivante :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>system "echo 'My Octopress Page is coming soon &hellip' > index.html"</span></code></pre></td></tr></table></div></figure>


<h3>> GitHub &ndash; HTTPS et les branches</h3>

<p>N&#8217;ayant pas de Client SSH d&#8217;installé sur mon PC, j&#8217;ai du modifier la variable <em>branch</em> du fichier <code>Rakefile</code> pour que l’expression régulière accepte les urls HTTPS au déploiement du blog (<a href="https://github.com/imathis/octopress/commit/f5bb4dd89ea64181910acb8ef0df5ae84644b75d">corrigé le 1er juin 2013</a>).
Mais une fois l&#8217;URL acceptée, conséquence directe ou non, Octopress n&#8217;a jamais voulu publier sur une autre branche que <em>gh-pages</em> (Project Page) au lieu de master (Organization Pages).
J&#8217;ai donc finalement précisé manuellement la branche dans le fichier <code>Rakefile</code> :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>branch = 'master'
</span><span class='line'>project = ''</span></code></pre></td></tr></table></div></figure>


<h3>> Coloration synthaxique</h3>

<p>La présence de la langue dans les blocs de code cassait systématiquement la génération du site :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>''' java
</span><span class='line'>public class Toto {
</span><span class='line'>}
</span><span class='line'>'''</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;installation de <a href="http://www.python.org/download/releases/2.7.5/">Python (version 2.7.5)</a> a corrigé le problème.</p>

<h3>> Majuscule à chaque mot dans le titre du post</h3>

<p>Ce n&#8217;est pas un bug mais un fonctionnement par défaut.
Chaque mot contenu dans le titre débutait par une majuscule.
Pour éviter ce comportement, il est nécessaire de mettre à <em>false</em> l&#8217;attribut <em>titlecase</em> du fichier <code>config.xml</code>.</p>

<h3>> Table des matières</h3>

<p>Pour terminer, j&#8217;avais imaginé que la génération des indexs dans les posts (la table des matières) aurait été automatisé.
Malheureusement, il est nécessaire de passer par des plugins :</p>

<ul>
<li><a href="http://brizzled.clapper.org/blog/2012/02/04/generating-a-table-of-contents-in-octopress/">http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/</a></li>
<li><a href="http://brizzled.clapper.org/blog/2012/02/04/generating-a-table-of-contents-in-octopress/">http://brizzled.clapper.org/blog/2012/02/04/generating-a-table-of-contents-in-octopress/</a></li>
</ul>


<h1>Ressources</h1>

<p>La <a href="http://octopress.org/docs/">documentation officielle</a> décrit étape par étape comment installer, rédiger et publier sur GitHub ou Heroku.
Pour les utilisateurs Windows, un tour sur <a href="http://derantell.github.io/blog/2012/12/02/getting-started-with-octopress-on-windows/">le blog de David Tellander</a> vous évitera de vous arracher les cheveux.</p>

<h1>Conclusion</h1>

<p>Pour l’instant, Octopress répond parfaitement à mes besoins.
Je ne regrette pas une seconde délaissé Worpress ou Blogger.
Si ma première publication n&#8217;a pas été simple, la publication d’un billet aujourd&#8217;hui est un jeu d’enfant.
Une communauté semble se développer autour du projet et de Jekyll de manière générale.
Si l’activité sur <a href="https://github.com/imathis/octopress">GitHub</a> n’est pas dingue ces derniers temps, une <a href="https://github.com/imathis/octopress/tree/3.0">version 3.0</a> semble se profiler à l&#8217;horizon.</p>
]]></content>
  </entry>
  
</feed>
